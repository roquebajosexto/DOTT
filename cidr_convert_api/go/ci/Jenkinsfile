pipeline {
  agent any
  tools {
    go 'go1.16.4'
  }
  environment {
    GO114MODULE = 'on'
    CGO_ENABLED = 0
    GOPATH = "${JENKINS_HOME}/jobs/${JOB_NAME}/builds/${BUILD_ID}"
    scannerHome = '/var/lib/jenkins/tools/hudson.plugins.sonar.SonarRunnerInstallation/sonar'
  }
  stages {
    stage('Pre Test') {
      steps {
          echo 'Installing dependenciess'
          sh 'go version'
          sh '''
            cd ./cidr_convert_api/go/
            go get -u golang.org/x/lint/golint
          '''
      }
    }
    stage('Test') {
      steps {
          echo 'Running vetting'
          sh '''
          cd ./cidr_convert_api/go/
          go vet .'''
          echo 'Running Unit testing'
          sh '''
          cd ./cidr_convert_api/go/
          go test -cover -coverprofile='cover.out'
          '''
          sh '''
          cd ./cidr_convert_api/go/
          ${GOPATH}/bin/golint'
          '''
      }
    }
    stage('SonarQube analysis') {
      steps {
        withSonarQubeEnv('sonarcloud') {
          echo "${ env.SONAR_HOST_URL }"
          echo "${ env.SCANNER_HOME }"
          sh '''${scannerHome}/bin/sonar-scanner \
                -Dsonar.organization=roquebajosexto \
                -Dsonar.projectKey=roquebajosexto_DOTT \
                -Dsonar.sources=./cidr_convert_api/go/ \
                -Dsonar.host.url=https://sonarcloud.io

         '''
        }
      }
    }
    stage('build') {
      steps {
        sh '''
            cd ./cidr_convert_api/go/
            sudo docker build . -t devops-roque
            sudo docker tag devops-roque roquebajosexto/devops-roque
            sudo docker push roquebajosexto/devops-roque
          '''
      }
    }
    stage('deploy') {
        steps {
        //     sh '''
        //   cd ./cidr_convert_api/go/
        //   sudo docker-compose up -d --build
        //   '''
        kubernetesDeploy(
                    configs: 'cidr_convert_api/go/goms.yml',
                    kubeconfigId: 'K8S',
                    enableConfigSubstitution: true
                    )
        }
    }
  }
}
